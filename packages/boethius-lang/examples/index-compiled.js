(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

var _main = require("../src/main");

var _main2 = _interopRequireDefault(_main);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

window.compile = _main2.default;

},{"../src/main":6}],2:[function(require,module,exports){
(function (process){
"use strict";

/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var lang = function () {
    var o = function o(k, v, _o, l) {
        for (_o = _o || {}, l = k.length; l--; _o[k[l]] = v) {}return _o;
    },
        $V0 = [1, 16],
        $V1 = [1, 17],
        $V2 = [1, 18],
        $V3 = [1, 14],
        $V4 = [1, 15],
        $V5 = [1, 9],
        $V6 = [4, 12, 15, 17, 20, 27, 35],
        $V7 = [4, 12, 15, 17, 20, 23, 27, 29, 35],
        $V8 = [1, 22],
        $V9 = [1, 28],
        $Va = [4, 12, 15, 17, 18, 20, 23, 27, 29, 35],
        $Vb = [1, 32],
        $Vc = [1, 39],
        $Vd = [1, 45],
        $Ve = [12, 15, 17, 20, 22, 35],
        $Vf = [12, 15, 17, 20, 23, 29, 35],
        $Vg = [12, 18],
        $Vh = [1, 64];
    var parser = { trace: function trace() {},
        yy: {},
        symbols_: { "error": 2, "expressions": 3, "EOF": 4, "statements": 5, "float": 6, "INTEGER": 7, "DOTS": 8, "duration": 9, "FWDSLASH": 10, "note": 11, "PITCH": 12, "notelist": 13, "rest": 14, "REST": 15, "chord": 16, "OPENBRKT": 17, "CLOSEBRKT": 18, "chordSymbol": 19, "LPAREN": 20, "CSYM": 21, "IDENTIFIER": 22, "RPAREN": 23, "item": 24, "ratio": 25, "voice": 26, "LBRKT": 27, "list": 28, "RBRKT": 29, "propertydef": 30, "EQUALS": 31, "BOOL": 32, "propertylist": 33, "propscope": 34, "VAR": 35, "assignment": 36, "statement": 37, "$accept": 0, "$end": 1 },
        terminals_: { 2: "error", 4: "EOF", 7: "INTEGER", 8: "DOTS", 10: "FWDSLASH", 12: "PITCH", 15: "REST", 17: "OPENBRKT", 18: "CLOSEBRKT", 20: "LPAREN", 21: "CSYM", 22: "IDENTIFIER", 23: "RPAREN", 27: "LBRKT", 29: "RBRKT", 31: "EQUALS", 32: "BOOL", 35: "VAR" },
        productions_: [0, [3, 1], [3, 2], [6, 3], [9, 2], [9, 3], [11, 1], [11, 2], [13, 1], [13, 2], [14, 1], [14, 2], [16, 3], [16, 4], [19, 5], [19, 6], [19, 6], [24, 1], [24, 1], [24, 1], [24, 1], [25, 3], [26, 4], [30, 3], [30, 3], [30, 3], [30, 3], [30, 3], [33, 1], [33, 2], [34, 4], [34, 4], [34, 3], [28, 1], [28, 2], [28, 1], [28, 2], [28, 1], [28, 2], [36, 3], [37, 1], [37, 1], [37, 1], [37, 1], [5, 1], [5, 2]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
            /* this == yyval */

            var $0 = $$.length - 1;
            switch (yystate) {
                case 1:
                    return { voices: yy.voices, chordSymbols: yy.chordSymbols };
                    break;
                case 2:
                    return $$[$0 - 1];
                    break;
                case 3:
                    this.$ = parseFloat($$[$0 - 2] + "." + $$[$0]);
                    break;
                case 4:
                    this.$ = { value: Number($$[$0]), dots: 0 };
                    break;
                case 5:
                    this.$ = { value: Number($$[$0 - 1]), dots: $$[$0].length };
                    break;
                case 6:

                    var props = yy.noteInfo($$[$0]);
                    // default values
                    this.$ = new NoteNode(props);

                    break;
                case 7:

                    var props = yy.noteInfo($$[$0 - 1]);
                    props.value = $$[$0].value;
                    props.dots = $$[$0].dots;
                    this.$ = new NoteNode(props);

                    break;
                case 8:case 33:case 44:
                    this.$ = [$$[$0]];
                    break;
                case 9:case 34:case 38:case 45:
                    this.$ = $$[$0 - 1].concat($$[$0]);
                    break;
                case 10:
                    this.$ = new RestNode({});
                    break;
                case 11:
                    this.$ = new RestNode({ value: $$[$0].value, dots: $$[$0].dots });
                    break;
                case 12:
                    this.$ = { type: CHORD, props: {}, children: $$[$0 - 1] };
                    break;
                case 13:

                    this.$ = { type: CHORD, children: $$[$0 - 2], props: { value: $$[$0].value, dots: $$[$0].dots } };

                    break;
                case 14:

                    var chordSymbol = { type: CHORDSYMBOL, props: { value: $$[$0 - 2], measure: Number($$[$0 - 1]), beat: 0 } };
                    yy.chordSymbols.push(chordSymbol);
                    this.$ = chordSymbol;

                    break;
                case 15:case 16:

                    var chordSymbol = { type: CHORDSYMBOL, props: { value: $$[$0 - 3], measure: Number($$[$0 - 2]), beat: Number($$[$0 - 1]) } };
                    yy.chordSymbols.push(chordSymbol);
                    this.$ = chordSymbol;

                    break;
                case 17:case 18:case 19:case 20:case 37:case 40:case 41:case 42:case 43:
                    this.$ = $$[$0];
                    break;
                case 21:
                    this.$ = "" + $$[$0 - 2] + $$[$0 - 1] + $$[$0];
                    break;
                case 22:

                    if (!yy.voices[$$[$0 - 2]]) {
                        // create array for voice items
                        yy.voices[$$[$0 - 2]] = $$[$0 - 1];
                    } else {
                        yy.voices[$$[$0 - 2]] = yy.voices[$$[$0 - 2]].concat($$[$0 - 1]);
                    }

                    this.$ = $$[$0 - 1];

                    break;
                case 23:
                    this.$ = { key: $$[$0 - 2], value: toBoolean($$[$0]) };
                    break;
                case 24:
                    this.$ = { key: $$[$0 - 2], value: Number($$[$0]) };
                    break;
                case 25:case 26:case 27:
                    this.$ = { key: $$[$0 - 2], value: $$[$0] };
                    break;
                case 28:

                    var props = {};
                    props[$$[$0].key] = $$[$0].value;
                    this.$ = props;

                    break;
                case 29:

                    var props = {};
                    props[$$[$0].key] = $$[$0].value;
                    this.$ = Object.assign({}, $$[$0 - 1], props);

                    break;
                case 30:
                    this.$ = $$[$0 - 1].map(function (item) {
                        return applyProperty(item, $$[$0 - 2], true);
                    });
                    break;
                case 31:
                    this.$ = $$[$0 - 1].map(function (item) {
                        // items properties overwrite the proplist's properties
                        var props = Object.assign({}, $$[$0 - 2], item.props);
                        // resulting props are placed on the item.
                        return Object.assign({}, item, { props: props });
                    });
                    break;
                case 32:

                    this.$ = $$[$0 - 1];

                    break;
                case 35:

                    var element = yy.vars[$$[$0]];
                    if (!element) this.throw("Unknown variable: " + $$[$0]);
                    this.$ = [].concat(element.map(function (el) {
                        return el.clone();
                    }));

                    break;
                case 36:

                    var element = yy.vars[$$[$0]];
                    if (!element) this.throw("Unknown variable: " + $$[$0]);
                    this.$ = $$[$0 - 1].concat(element.map(function (el) {
                        return el.clone();
                    }));

                    break;
                case 39:

                    yy.vars[$$[$0 - 2]] = $$[$0];
                    this.$ = $$[$0];

                    break;
            }
        },
        table: [{ 3: 1, 4: [1, 2], 5: 3, 11: 10, 12: $V0, 14: 11, 15: $V1, 16: 12, 17: $V2, 19: 13, 20: $V3, 24: 6, 26: 8, 27: $V4, 34: 7, 35: $V5, 36: 5, 37: 4 }, { 1: [3] }, { 1: [2, 1] }, { 4: [1, 19], 11: 10, 12: $V0, 14: 11, 15: $V1, 16: 12, 17: $V2, 19: 13, 20: $V3, 24: 6, 26: 8, 27: $V4, 34: 7, 35: $V5, 36: 5, 37: 20 }, o($V6, [2, 44]), o($V6, [2, 40]), o($V6, [2, 41]), o($V6, [2, 42]), o($V6, [2, 43]), { 31: [1, 21] }, o($V7, [2, 17]), o($V7, [2, 18]), o($V7, [2, 19]), o($V7, [2, 20]), { 11: 10, 12: $V0, 14: 11, 15: $V1, 16: 12, 17: $V2, 19: 13, 20: $V3, 21: [1, 25], 22: $V8, 24: 27, 28: 24, 30: 26, 33: 23, 34: 29, 35: $V9 }, { 22: [1, 30] }, o($Va, [2, 6], { 9: 31, 10: $Vb }), o($V7, [2, 10], { 9: 33, 10: $Vb }), { 11: 35, 12: $V0, 13: 34 }, { 1: [2, 2] }, o($V6, [2, 45]), { 20: [1, 37], 34: 36 }, { 11: 10, 12: $V0, 14: 11, 15: $V1, 16: 12, 17: $V2, 19: 13, 20: $V3, 24: 27, 28: 38, 31: $Vc, 34: 29, 35: $V9 }, { 11: 10, 12: $V0, 14: 11, 15: $V1, 16: 12, 17: $V2, 19: 13, 20: $V3, 22: [1, 42], 24: 27, 28: 40, 30: 41, 34: 29, 35: $V9 }, { 11: 10, 12: $V0, 14: 11, 15: $V1, 16: 12, 17: $V2, 19: 13, 20: $V3, 23: [1, 43], 24: 44, 34: 46, 35: $Vd }, { 22: [1, 47] }, o($Ve, [2, 28]), o($Vf, [2, 33]), o($Vf, [2, 35]), o($Vf, [2, 37]), { 11: 10, 12: $V0, 14: 11, 15: $V1, 16: 12, 17: $V2, 19: 13, 20: $V3, 24: 27, 28: 48, 34: 29, 35: $V9 }, o($Va, [2, 7]), { 7: [1, 49] }, o($V7, [2, 11]), { 11: 51, 12: $V0, 18: [1, 50] }, o($Vg, [2, 8]), o($V6, [2, 39]), { 11: 10, 12: $V0, 14: 11, 15: $V1, 16: 12, 17: $V2, 19: 13, 20: $V3, 22: $V8, 24: 27, 28: 24, 30: 26, 33: 23, 34: 29, 35: $V9 }, { 11: 10, 12: $V0, 14: 11, 15: $V1, 16: 12, 17: $V2, 19: 13, 20: $V3, 23: [1, 52], 24: 44, 34: 46, 35: $Vd }, { 6: 57, 7: [1, 54], 22: [1, 55], 25: 56, 32: [1, 53] }, { 11: 10, 12: $V0, 14: 11, 15: $V1, 16: 12, 17: $V2, 19: 13, 20: $V3, 23: [1, 58], 24: 44, 34: 46, 35: $Vd }, o($Ve, [2, 29]), { 31: $Vc }, o($V7, [2, 32]), o($Vf, [2, 34]), o($Vf, [2, 36]), o($Vf, [2, 38]), { 7: [1, 59] }, { 11: 10, 12: $V0, 14: 11, 15: $V1, 16: 12, 17: $V2, 19: 13, 20: $V3, 24: 44, 29: [1, 60], 34: 46, 35: $Vd }, o($Va, [2, 4], { 8: [1, 61] }), o($V7, [2, 12], { 9: 62, 10: $Vb }), o($Vg, [2, 9]), o($V7, [2, 30]), o($Ve, [2, 23]), o($Ve, [2, 24], { 8: $Vh, 10: [1, 63] }), o($Ve, [2, 25]), o($Ve, [2, 26]), o($Ve, [2, 27]), o($V7, [2, 31]), { 6: 67, 7: [1, 66], 23: [1, 65] }, o($V6, [2, 22]), o($Va, [2, 5]), o($V7, [2, 13]), { 7: [1, 68] }, { 7: [1, 69] }, o($V7, [2, 14]), { 8: $Vh, 23: [1, 70] }, { 23: [1, 71] }, o($Ve, [2, 21]), o([12, 15, 17, 20, 22, 23, 35], [2, 3]), o($V7, [2, 15]), o($V7, [2, 16])],
        defaultActions: { 2: [2, 1], 19: [2, 2] },
        parseError: function parseError(str, hash) {
            if (hash.recoverable) {
                this.trace(str);
            } else {
                var _parseError = function _parseError(msg, hash) {
                    this.message = msg;
                    this.hash = hash;
                };

                _parseError.prototype = Error;

                throw new _parseError(str, hash);
            }
        },
        parse: function parse(input) {
            var self = this,
                stack = [0],
                tstack = [],
                vstack = [null],
                lstack = [],
                table = this.table,
                yytext = '',
                yylineno = 0,
                yyleng = 0,
                recovering = 0,
                TERROR = 2,
                EOF = 1;
            var args = lstack.slice.call(arguments, 1);
            var lexer = Object.create(this.lexer);
            var sharedState = { yy: {} };
            for (var k in this.yy) {
                if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                }
            }
            lexer.setInput(input, sharedState.yy);
            sharedState.yy.lexer = lexer;
            sharedState.yy.parser = this;
            if (typeof lexer.yylloc == 'undefined') {
                lexer.yylloc = {};
            }
            var yyloc = lexer.yylloc;
            lstack.push(yyloc);
            var ranges = lexer.options && lexer.options.ranges;
            if (typeof sharedState.yy.parseError === 'function') {
                this.parseError = sharedState.yy.parseError;
            } else {
                this.parseError = Object.getPrototypeOf(this).parseError;
            }
            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }
            _token_stack: var lex = function lex() {
                var token;
                token = lexer.lex() || EOF;
                if (typeof token !== 'number') {
                    token = self.symbols_[token] || token;
                }
                return token;
            };
            var symbol,
                preErrorSymbol,
                state,
                action,
                a,
                r,
                yyval = {},
                p,
                len,
                newState,
                expected;
            while (true) {
                state = stack[stack.length - 1];
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                        symbol = lex();
                    }
                    action = table[state] && table[state][symbol];
                }
                if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];
                    for (p in table[state]) {
                        if (this.terminals_[p] && p > TERROR) {
                            expected.push('\'' + this.terminals_[p] + '\'');
                        }
                    }
                    if (lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }
                    this.parseError(errStr, {
                        text: lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: lexer.yylineno,
                        loc: yyloc,
                        expected: expected
                    });
                }
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                }
                switch (action[0]) {
                    case 1:
                        stack.push(symbol);
                        vstack.push(lexer.yytext);
                        lstack.push(lexer.yylloc);
                        stack.push(action[1]);
                        symbol = null;
                        if (!preErrorSymbol) {
                            yyleng = lexer.yyleng;
                            yytext = lexer.yytext;
                            yylineno = lexer.yylineno;
                            yyloc = lexer.yylloc;
                            if (recovering > 0) {
                                recovering--;
                            }
                        } else {
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        len = this.productions_[action[1]][1];
                        yyval.$ = vstack[vstack.length - len];
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column
                        };
                        if (ranges) {
                            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                        }
                        r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));
                        if (typeof r !== 'undefined') {
                            return r;
                        }
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]);
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        return true;
                }
            }
            return true;
        } };

    // types
    var NOTE = "note";
    var REST = "rest";
    var CHORD = "chord";
    var CHORDSYMBOL = "chordSymbol";

    var applyProperty = function applyProperty(item, prop, val) {
        if (item.props[prop] !== undefined) {
            return item;
        } else {
            item.props[prop] = val;
            return item;
        }
    };

    var toBoolean = function toBoolean(string) {
        if (string === "false") {
            return false;
        } else {
            return Boolean(string);
        }
    };

    function NoteNode(props) {
        this.props = props;
    }

    NoteNode.prototype.type = NOTE;

    NoteNode.prototype.clone = function () {
        var props = Object.assign({}, this.props);
        return new NoteNode(props);
    };

    function RestNode(props) {
        this.props = props;
    }

    RestNode.prototype.type = REST;

    RestNode.prototype.clone = function () {};

    function ChordNode(props, children) {
        this.props = props;
    }

    ChordNode.prototype.type = CHORD;

    ChordNode.prototype.clone = function () {};

    function ChordSymbolNode(props) {
        this.props = props;
    }

    ChordSymbolNode.prototype.type = CHORDSYMBOL;

    ChordSymbolNode.prototype.clone = function () {};
    /* generated by jison-lex 0.3.4 */
    var lexer = function () {
        var lexer = {

            EOF: 1,

            parseError: function parseError(str, hash) {
                if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                } else {
                    throw new Error(str);
                }
            },

            // resets the lexer, sets new input
            setInput: function setInput(input, yy) {
                this.yy = yy || this.yy || {};
                this._input = input;
                this._more = this._backtrack = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = '';
                this.conditionStack = ['INITIAL'];
                this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                };
                if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                }
                this.offset = 0;
                return this;
            },

            // consumes and returns one char from the input
            input: function input() {
                var ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.offset++;
                this.match += ch;
                this.matched += ch;
                var lines = ch.match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                } else {
                    this.yylloc.last_column++;
                }
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }

                this._input = this._input.slice(1);
                return ch;
            },

            // unshifts one char (or a string) into the input
            unput: function unput(ch) {
                var len = ch.length;
                var lines = ch.split(/(?:\r\n?|\n)/g);

                this._input = ch + this._input;
                this.yytext = this.yytext.substr(0, this.yytext.length - len);
                //this.yyleng -= len;
                this.offset -= len;
                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                this.match = this.match.substr(0, this.match.length - 1);
                this.matched = this.matched.substr(0, this.matched.length - 1);

                if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                }
                var r = this.yylloc.range;

                this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
                };

                if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                }
                this.yyleng = this.yytext.length;
                return this;
            },

            // When called from action, caches matched text and appends it on next action
            more: function more() {
                this._more = true;
                return this;
            },

            // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
            reject: function reject() {
                if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
                return this;
            },

            // retain first n characters of the match
            less: function less(n) {
                this.unput(this.match.slice(n));
            },

            // displays already matched input, i.e. for error messages
            pastInput: function pastInput() {
                var past = this.matched.substr(0, this.matched.length - this.match.length);
                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
            },

            // displays upcoming input, i.e. for error messages
            upcomingInput: function upcomingInput() {
                var next = this.match;
                if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                }
                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
            },

            // displays the character position where the lexing error occurred, i.e. for error messages
            showPosition: function showPosition() {
                var pre = this.pastInput();
                var c = new Array(pre.length + 1).join("-");
                return pre + this.upcomingInput() + "\n" + c + "^";
            },

            // test the lexed token: return FALSE when not a match, otherwise return token
            test_match: function test_match(match, indexed_rule) {
                var token, lines, backup;

                if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                        yylineno: this.yylineno,
                        yylloc: {
                            first_line: this.yylloc.first_line,
                            last_line: this.last_line,
                            first_column: this.yylloc.first_column,
                            last_column: this.yylloc.last_column
                        },
                        yytext: this.yytext,
                        match: this.match,
                        matches: this.matches,
                        matched: this.matched,
                        yyleng: this.yyleng,
                        offset: this.offset,
                        _more: this._more,
                        _input: this._input,
                        yy: this.yy,
                        conditionStack: this.conditionStack.slice(0),
                        done: this.done
                    };
                    if (this.options.ranges) {
                        backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                }

                lines = match[0].match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno += lines.length;
                }
                this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
                };
                this.yytext += match[0];
                this.match += match[0];
                this.matches = match;
                this.yyleng = this.yytext.length;
                if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                }
                this._more = false;
                this._backtrack = false;
                this._input = this._input.slice(match[0].length);
                this.matched += match[0];
                token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
                if (this.done && this._input) {
                    this.done = false;
                }
                if (token) {
                    return token;
                } else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                        this[k] = backup[k];
                    }
                    return false; // rule action called reject() implying the next rule should be tested instead.
                }
                return false;
            },

            // return next match in input
            next: function next() {
                if (this.done) {
                    return this.EOF;
                }
                if (!this._input) {
                    this.done = true;
                }

                var token, match, tempMatch, index;
                if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                }
                var rules = this._currentRules();
                for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);
                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                        match = tempMatch;
                        index = i;
                        if (this.options.backtrack_lexer) {
                            token = this.test_match(tempMatch, rules[i]);
                            if (token !== false) {
                                return token;
                            } else if (this._backtrack) {
                                match = false;
                                continue; // rule action called reject() implying a rule MISmatch.
                            } else {
                                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                                return false;
                            }
                        } else if (!this.options.flex) {
                            break;
                        }
                    }
                }
                if (match) {
                    token = this.test_match(match, rules[index]);
                    if (token !== false) {
                        return token;
                    }
                    // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                    return false;
                }
                if (this._input === "") {
                    return this.EOF;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
            },

            // return next match that has a token
            lex: function lex() {
                var r = this.next();
                if (r) {
                    return r;
                } else {
                    return this.lex();
                }
            },

            // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
            begin: function begin(condition) {
                this.conditionStack.push(condition);
            },

            // pop the previously active lexer condition state off the condition stack
            popState: function popState() {
                var n = this.conditionStack.length - 1;
                if (n > 0) {
                    return this.conditionStack.pop();
                } else {
                    return this.conditionStack[0];
                }
            },

            // produce the lexer rule set which is active for the currently active lexer condition state
            _currentRules: function _currentRules() {
                if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                } else {
                    return this.conditions["INITIAL"].rules;
                }
            },

            // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
            topState: function topState(n) {
                n = this.conditionStack.length - 1 - Math.abs(n || 0);
                if (n >= 0) {
                    return this.conditionStack[n];
                } else {
                    return "INITIAL";
                }
            },

            // alias for begin(condition)
            pushState: function pushState(condition) {
                this.begin(condition);
            },

            // return the number of states currently on the stack
            stateStackSize: function stateStackSize() {
                return this.conditionStack.length;
            },
            options: {},
            performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                var YYSTATE = YY_START;
                switch ($avoiding_name_collisions) {
                    case 0:
                        /* skip whitespace */
                        break;
                    case 1:
                        /* ignore comments */
                        break;
                    case 2:
                        /* ignore barlines */
                        break;
                    case 3:
                        return 20;
                        break;
                    case 4:
                        return 23;
                        break;
                    case 5:
                        return 27;
                        break;
                    case 6:
                        return 29;
                        break;
                    case 7:
                        return 17;
                        break;
                    case 8:
                        return 18;
                        break;
                    case 9:
                        return 10;
                        break;
                    case 10:
                        return 31;
                        break;
                    case 11:
                        return 12;
                        break;
                    case 12:
                        return 15;
                        break;
                    case 13:
                        return 8;
                        break;
                    case 14:
                        return 32;
                        break;
                    case 15:
                        return 7;
                        break;
                    case 16:
                        return 21;
                        break;
                    case 17:
                        return 35;
                        break;
                    case 18:
                        return 22;
                        break;
                    case 19:
                        return 4;
                        break;
                    case 20:
                        return 'INVALID';
                        break;
                }
            },
            rules: [/^(?:\s+)/, /^(?:;.*)/, /^(?:\|)/, /^(?:\()/, /^(?:\))/, /^(?:\[)/, /^(?:\])/, /^(?:<)/, /^(?:>)/, /^(?:\/)/, /^(?:=)/, /^(?:[a-gA-G][b|#]{0,2}[\d]+)/, /^(?:r\b)/, /^(?:\.+)/, /^(?:true|false\b)/, /^(?:[0-9]+)/, /^(?:csym\b)/, /^(?:~[a-zA-Z][a-zA-Z0-9]*)/, /^(?:[a-zA-Z][a-zA-Z0-9]*)/, /^(?:$)/, /^(?:.)/],
            conditions: { "INITIAL": { "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "inclusive": true } }
        };
        return lexer;
    }();
    parser.lexer = lexer;
    function Parser() {
        this.yy = {};
    }
    Parser.prototype = parser;parser.Parser = Parser;
    return new Parser();
}();

if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parser = lang;
    exports.Parser = lang.Parser;
    exports.parse = function () {
        return lang.parse.apply(lang, arguments);
    };
    exports.main = function commonjsMain(args) {
        if (!args[1]) {
            console.log('Usage: ' + args[0] + ' FILE');
            process.exit(1);
        }
        var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
        return exports.parser.parse(source);
    };
    if (typeof module !== 'undefined' && require.main === module) {
        exports.main(process.argv.slice(1));
    }
}

}).call(this,require('_process'))

},{"_process":5,"fs":3,"path":4}],3:[function(require,module,exports){

},{}],4:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))

},{"_process":5}],5:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _lang = require("../lang/lang");

var _musicBox = require("./musicBox");

function compile(program) {
    _lang.parser.yy.noteInfo = _musicBox.noteInfo;
    _lang.parser.yy.toMusic = _musicBox.toMusic;
    _lang.parser.yy.voices = {};
    _lang.parser.yy.chordSymbols = [];
    _lang.parser.yy.vars = {};

    var parsed = _lang.parser.parse(program);

    return { voices: _lang.parser.yy.voices, chordSymbols: _lang.parser.yy.chordSymbols };
}

exports.default = compile;

},{"../lang/lang":2,"./musicBox":7}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _NOTES;

exports.noteInfo = noteInfo;
exports.toMusic = toMusic;

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var NOTE = "note";
var REST = "rest";
var CHORD = "chord";
var CHORDSYMBOL = "chordSymbol";

var NOTES = (_NOTES = {
    "C": 0, "c": 0, "b#": 0, "B#": 0, "Dbb": 0, "DBB": 0, "dbb": 0, "dBB": 0,
    "C#": 1, "c#": 1, "Db": 1, "db": 1, "DB": 1, "dB": 1,
    "D": 2, "d": 2, "c##": 2, "C##": 2, "ebb": 2, "Ebb": 2, "eBB": 2, "EBB": 2,
    "D#": 3, "d#": 3, "Eb": 3, "eb": 3, "EB": 3, "eB": 3,
    "E": 4, "e": 4, "d##": 4, "D##": 4, "fb": 4, "Fb": 4 }, _defineProperty(_NOTES, "Fb", 4), _defineProperty(_NOTES, "FB", 4), _defineProperty(_NOTES, "E#", 5), _defineProperty(_NOTES, "e#", 5), _defineProperty(_NOTES, "F", 5), _defineProperty(_NOTES, "f", 5), _defineProperty(_NOTES, "gbb", 5), _defineProperty(_NOTES, "Gbb", 5), _defineProperty(_NOTES, "gBB", 5), _defineProperty(_NOTES, "GBB", 5), _defineProperty(_NOTES, "F#", 6), _defineProperty(_NOTES, "f#", 6), _defineProperty(_NOTES, "Gb", 6), _defineProperty(_NOTES, "gb", 6), _defineProperty(_NOTES, "GB", 6), _defineProperty(_NOTES, "gB", 6), _defineProperty(_NOTES, "G", 7), _defineProperty(_NOTES, "g", 7), _defineProperty(_NOTES, "f##", 7), _defineProperty(_NOTES, "F##", 7), _defineProperty(_NOTES, "abb", 7), _defineProperty(_NOTES, "Abb", 7), _defineProperty(_NOTES, "aBB", 7), _defineProperty(_NOTES, "ABB", 7), _defineProperty(_NOTES, "G#", 8), _defineProperty(_NOTES, "g#", 8), _defineProperty(_NOTES, "Ab", 8), _defineProperty(_NOTES, "ab", 8), _defineProperty(_NOTES, "AB", 8), _defineProperty(_NOTES, "aB", 8), _defineProperty(_NOTES, "A", 9), _defineProperty(_NOTES, "a", 9), _defineProperty(_NOTES, "g##", 9), _defineProperty(_NOTES, "G##", 9), _defineProperty(_NOTES, "bbb", 9), _defineProperty(_NOTES, "Bbb", 9), _defineProperty(_NOTES, "Bbb", 9), _defineProperty(_NOTES, "BBB", 9), _defineProperty(_NOTES, "A#", 10), _defineProperty(_NOTES, "a#", 10), _defineProperty(_NOTES, "Bb", 10), _defineProperty(_NOTES, "bb", 10), _defineProperty(_NOTES, "BB", 10), _defineProperty(_NOTES, "bB", 10), _defineProperty(_NOTES, "B", 11), _defineProperty(_NOTES, "b", 11), _defineProperty(_NOTES, "a##", 11), _defineProperty(_NOTES, "A##", 11), _defineProperty(_NOTES, "Cb", 11), _defineProperty(_NOTES, "cb", 11), _defineProperty(_NOTES, "CB", 11), _defineProperty(_NOTES, "cB", 11), _NOTES);

var NOTE_RE = /([a-gA-g][#bB]*?)([0-9]+)/;

/*
 * @param noteString - string representing a note.
 * @return [noteString, pitchClass, octave]
 */
function validateNoteString(noteString) {
    return noteString.match(NOTE_RE);
}

/*
 * @param octave - number
 * @param interval - number
 * @return midi number
 */
function octaveNoteToMidi(octave, interval) {
    return octave * 12 + interval + 12;
}

function noteInfo(noteString) {
    var validated = validateNoteString(noteString);
    var pitchClass = validated[1];
    var octave = validated[2];
    var interval = NOTES[pitchClass];
    var midi = octaveNoteToMidi(octave, interval);
    return {
        pitch: validated[0],
        pitchClass: pitchClass,
        octave: Number(octave),
        interval: interval,
        midi: midi,
        frequency: midiToHz(midi)
    };
}

function noteToMidi(note) {
    return noteInfo(note).midi;
}

function midiToHz(midi) {
    return Math.pow(2, (midi - 69) / 12) * 440;
}

function noteToHz(note) {
    return midiToHz(noteInfo(note).midi);
}

function toMusic(parsed) {
    return parsed.reduce(function (acc, item) {
        if (item && item.type === CHORDSYMBOL) {
            // acc.chordSymbols.push(item);
        } else if (acc.voices[item.props.voice]) {
            acc.voices[item.props.voice].push(item);
        } else {
            acc.voices[item.props.voice] = [item];
        }

        return acc;
    }, { chordSymbols: [], voices: {} });
}

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
