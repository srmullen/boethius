(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

var _main = require("../src/main");

var _main2 = _interopRequireDefault(_main);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

window.compile = _main2.default;

},{"../src/main":7}],2:[function(require,module,exports){
(function (process){
"use strict";

/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var lang = function () {
    var o = function o(k, v, _o, l) {
        for (_o = _o || {}, l = k.length; l--; _o[k[l]] = v) {}return _o;
    },
        $V0 = [1, 19],
        $V1 = [1, 17],
        $V2 = [1, 18],
        $V3 = [1, 14],
        $V4 = [1, 15],
        $V5 = [1, 9],
        $V6 = [4, 12, 16, 18, 21, 28, 36],
        $V7 = [4, 12, 16, 18, 21, 24, 28, 30, 36],
        $V8 = [1, 23],
        $V9 = [1, 29],
        $Va = [4, 12, 16, 18, 19, 21, 24, 28, 30, 36],
        $Vb = [1, 33],
        $Vc = [4, 10, 12, 16, 18, 19, 21, 24, 28, 30, 36],
        $Vd = [1, 41],
        $Ve = [1, 47],
        $Vf = [12, 16, 18, 21, 23, 36],
        $Vg = [12, 16, 18, 21, 24, 30, 36],
        $Vh = [12, 19],
        $Vi = [1, 66];
    var parser = { trace: function trace() {},
        yy: {},
        symbols_: { "error": 2, "expressions": 3, "EOF": 4, "statements": 5, "float": 6, "INTEGER": 7, "DOTS": 8, "duration": 9, "FWDSLASH": 10, "pitch": 11, "PITCHCLASS": 12, "note": 13, "notelist": 14, "rest": 15, "REST": 16, "chord": 17, "OPENBRKT": 18, "CLOSEBRKT": 19, "chordSymbol": 20, "LPAREN": 21, "CSYM": 22, "IDENTIFIER": 23, "RPAREN": 24, "item": 25, "ratio": 26, "voice": 27, "LBRKT": 28, "list": 29, "RBRKT": 30, "propertydef": 31, "EQUALS": 32, "BOOL": 33, "propertylist": 34, "propscope": 35, "VAR": 36, "assignment": 37, "statement": 38, "$accept": 0, "$end": 1 },
        terminals_: { 2: "error", 4: "EOF", 7: "INTEGER", 8: "DOTS", 10: "FWDSLASH", 12: "PITCHCLASS", 16: "REST", 18: "OPENBRKT", 19: "CLOSEBRKT", 21: "LPAREN", 22: "CSYM", 23: "IDENTIFIER", 24: "RPAREN", 28: "LBRKT", 30: "RBRKT", 32: "EQUALS", 33: "BOOL", 36: "VAR" },
        productions_: [0, [3, 1], [3, 2], [6, 3], [9, 2], [9, 3], [11, 1], [11, 2], [13, 1], [13, 2], [14, 1], [14, 2], [15, 1], [15, 2], [17, 3], [17, 4], [20, 5], [20, 6], [20, 6], [25, 1], [25, 1], [25, 1], [25, 1], [26, 3], [27, 4], [31, 3], [31, 3], [31, 3], [31, 3], [31, 3], [34, 1], [34, 2], [35, 4], [35, 4], [35, 3], [29, 1], [29, 2], [29, 1], [29, 2], [29, 1], [29, 2], [37, 3], [38, 1], [38, 1], [38, 1], [38, 1], [5, 1], [5, 2]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
            /* this == yyval */

            var $0 = $$.length - 1;
            switch (yystate) {
                case 1:
                    return { voices: yy.voices, chordSymbols: yy.chordSymbols };
                    break;
                case 2:
                    return $$[$0 - 1];
                    break;
                case 3:
                    this.$ = parseFloat($$[$0 - 2] + "." + $$[$0]);
                    break;
                case 4:
                    this.$ = { value: Number($$[$0]), dots: 0 };
                    break;
                case 5:
                    this.$ = { value: Number($$[$0 - 1]), dots: $$[$0].length };
                    break;
                case 6:
                    this.$ = { pitchClass: $$[$0] };
                    break;
                case 7:
                    this.$ = { pitchClass: $$[$0 - 1], octave: Number($$[$0]) };
                    break;
                case 8:

                    // default values
                    this.$ = new NoteNode($$[$0]);

                    break;
                case 9:

                    this.$ = new NoteNode(Object.assign({}, $$[$0 - 1], $$[$0]));

                    break;
                case 10:case 35:case 46:
                    this.$ = [$$[$0]];
                    break;
                case 11:case 36:case 40:case 47:
                    this.$ = $$[$0 - 1].concat($$[$0]);
                    break;
                case 12:
                    this.$ = new RestNode({});
                    break;
                case 13:
                    this.$ = new RestNode({ value: $$[$0].value, dots: $$[$0].dots });
                    break;
                case 14:
                    this.$ = new ChordNode({}, $$[$0 - 1]);
                    break;
                case 15:

                    /*this.$ = {type: CHORD, children: $$[$0-2], props: {value: $$[$0].value, dots: $$[$0].dots}};*/
                    this.$ = new ChordNode({ value: $$[$0].value, dots: $$[$0].dots }, $$[$0 - 2]);

                    break;
                case 16:

                    var chordSymbol = { type: CHORDSYMBOL, props: { value: $$[$0 - 2], measure: Number($$[$0 - 1]), beat: 0 } };
                    yy.chordSymbols.push(chordSymbol);
                    this.$ = chordSymbol;

                    break;
                case 17:case 18:

                    var chordSymbol = { type: CHORDSYMBOL, props: { value: $$[$0 - 3], measure: Number($$[$0 - 2]), beat: Number($$[$0 - 1]) } };
                    yy.chordSymbols.push(chordSymbol);
                    this.$ = chordSymbol;

                    break;
                case 19:case 20:case 21:case 22:case 39:case 42:case 43:case 44:case 45:
                    this.$ = $$[$0];
                    break;
                case 23:
                    this.$ = "" + $$[$0 - 2] + $$[$0 - 1] + $$[$0];
                    break;
                case 24:

                    /*var expantion = $$[$0-1].map(function (item) {
                        return item.expand();
                    });*/

                    if (!yy.voices[$$[$0 - 2]]) {
                        // create array for voice items
                        yy.voices[$$[$0 - 2]] = $$[$0 - 1];
                    } else {
                        yy.voices[$$[$0 - 2]] = yy.voices[$$[$0 - 2]].concat($$[$0 - 1]);
                    }

                    this.$ = $$[$0 - 1];

                    break;
                case 25:
                    this.$ = { key: $$[$0 - 2], value: toBoolean($$[$0]) };
                    break;
                case 26:
                    this.$ = { key: $$[$0 - 2], value: Number($$[$0]) };
                    break;
                case 27:case 28:case 29:
                    this.$ = { key: $$[$0 - 2], value: $$[$0] };
                    break;
                case 30:

                    var props = {};
                    props[$$[$0].key] = $$[$0].value;
                    this.$ = props;

                    break;
                case 31:

                    var props = {};
                    props[$$[$0].key] = $$[$0].value;
                    this.$ = Object.assign({}, $$[$0 - 1], props);

                    break;
                case 32:
                    this.$ = $$[$0 - 1].map(function (item) {
                        var props = {};
                        props[$$[$0 - 2]] = true;
                        return clone(item, props);
                    });
                    break;
                case 33:
                    this.$ = $$[$0 - 1].map(function (item) {
                        // items properties overwrite the proplist's properties
                        var props = Object.assign({}, $$[$0 - 2], item.props);
                        // resulting props are placed on the item.
                        return item.clone(props);
                    });
                    break;
                case 34:

                    this.$ = $$[$0 - 1];

                    break;
                case 37:

                    var element = yy.vars[$$[$0]];
                    if (!element) throw new Error(errors.unitializedVar($$[$0], this));
                    this.$ = [].concat(element.reduce(function (acc, el) {
                        return acc.concat(clone(el));
                    }, []));

                    break;
                case 38:

                    var element = yy.vars[$$[$0]];
                    if (!element) throw new Error(errors.unitializedVar($$[$0], this));
                    this.$ = $$[$0 - 1].concat(element.reduce(function (acc, el) {
                        return acc.concat(clone(el));
                    }, []));

                    break;
                case 41:

                    yy.vars[$$[$0 - 2]] = $$[$0];
                    this.$ = $$[$0];

                    break;
            }
        },
        table: [{ 3: 1, 4: [1, 2], 5: 3, 11: 16, 12: $V0, 13: 10, 15: 11, 16: $V1, 17: 12, 18: $V2, 20: 13, 21: $V3, 25: 6, 27: 8, 28: $V4, 35: 7, 36: $V5, 37: 5, 38: 4 }, { 1: [3] }, { 1: [2, 1] }, { 4: [1, 20], 11: 16, 12: $V0, 13: 10, 15: 11, 16: $V1, 17: 12, 18: $V2, 20: 13, 21: $V3, 25: 6, 27: 8, 28: $V4, 35: 7, 36: $V5, 37: 5, 38: 21 }, o($V6, [2, 46]), o($V6, [2, 42]), o($V6, [2, 43]), o($V6, [2, 44]), o($V6, [2, 45]), { 32: [1, 22] }, o($V7, [2, 19]), o($V7, [2, 20]), o($V7, [2, 21]), o($V7, [2, 22]), { 11: 16, 12: $V0, 13: 10, 15: 11, 16: $V1, 17: 12, 18: $V2, 20: 13, 21: $V3, 22: [1, 26], 23: $V8, 25: 28, 29: 25, 31: 27, 34: 24, 35: 30, 36: $V9 }, { 23: [1, 31] }, o($Va, [2, 8], { 9: 32, 10: $Vb }), o($V7, [2, 12], { 9: 34, 10: $Vb }), { 11: 16, 12: $V0, 13: 36, 14: 35 }, o($Vc, [2, 6], { 7: [1, 37] }), { 1: [2, 2] }, o($V6, [2, 47]), { 21: [1, 39], 35: 38 }, { 11: 16, 12: $V0, 13: 10, 15: 11, 16: $V1, 17: 12, 18: $V2, 20: 13, 21: $V3, 25: 28, 29: 40, 32: $Vd, 35: 30, 36: $V9 }, { 11: 16, 12: $V0, 13: 10, 15: 11, 16: $V1, 17: 12, 18: $V2, 20: 13, 21: $V3, 23: [1, 44], 25: 28, 29: 42, 31: 43, 35: 30, 36: $V9 }, { 11: 16, 12: $V0, 13: 10, 15: 11, 16: $V1, 17: 12, 18: $V2, 20: 13, 21: $V3, 24: [1, 45], 25: 46, 35: 48, 36: $Ve }, { 23: [1, 49] }, o($Vf, [2, 30]), o($Vg, [2, 35]), o($Vg, [2, 37]), o($Vg, [2, 39]), { 11: 16, 12: $V0, 13: 10, 15: 11, 16: $V1, 17: 12, 18: $V2, 20: 13, 21: $V3, 25: 28, 29: 50, 35: 30, 36: $V9 }, o($Va, [2, 9]), { 7: [1, 51] }, o($V7, [2, 13]), { 11: 16, 12: $V0, 13: 53, 19: [1, 52] }, o($Vh, [2, 10]), o($Vc, [2, 7]), o($V6, [2, 41]), { 11: 16, 12: $V0, 13: 10, 15: 11, 16: $V1, 17: 12, 18: $V2, 20: 13, 21: $V3, 23: $V8, 25: 28, 29: 25, 31: 27, 34: 24, 35: 30, 36: $V9 }, { 11: 16, 12: $V0, 13: 10, 15: 11, 16: $V1, 17: 12, 18: $V2, 20: 13, 21: $V3, 24: [1, 54], 25: 46, 35: 48, 36: $Ve }, { 6: 59, 7: [1, 56], 23: [1, 57], 26: 58, 33: [1, 55] }, { 11: 16, 12: $V0, 13: 10, 15: 11, 16: $V1, 17: 12, 18: $V2, 20: 13, 21: $V3, 24: [1, 60], 25: 46, 35: 48, 36: $Ve }, o($Vf, [2, 31]), { 32: $Vd }, o($V7, [2, 34]), o($Vg, [2, 36]), o($Vg, [2, 38]), o($Vg, [2, 40]), { 7: [1, 61] }, { 11: 16, 12: $V0, 13: 10, 15: 11, 16: $V1, 17: 12, 18: $V2, 20: 13, 21: $V3, 25: 46, 30: [1, 62], 35: 48, 36: $Ve }, o($Va, [2, 4], { 8: [1, 63] }), o($V7, [2, 14], { 9: 64, 10: $Vb }), o($Vh, [2, 11]), o($V7, [2, 32]), o($Vf, [2, 25]), o($Vf, [2, 26], { 8: $Vi, 10: [1, 65] }), o($Vf, [2, 27]), o($Vf, [2, 28]), o($Vf, [2, 29]), o($V7, [2, 33]), { 6: 69, 7: [1, 68], 24: [1, 67] }, o($V6, [2, 24]), o($Va, [2, 5]), o($V7, [2, 15]), { 7: [1, 70] }, { 7: [1, 71] }, o($V7, [2, 16]), { 8: $Vi, 24: [1, 72] }, { 24: [1, 73] }, o($Vf, [2, 23]), o([12, 16, 18, 21, 23, 24, 36], [2, 3]), o($V7, [2, 17]), o($V7, [2, 18])],
        defaultActions: { 2: [2, 1], 20: [2, 2] },
        parseError: function parseError(str, hash) {
            if (hash.recoverable) {
                this.trace(str);
            } else {
                var _parseError = function _parseError(msg, hash) {
                    this.message = msg;
                    this.hash = hash;
                };

                _parseError.prototype = Error;

                throw new _parseError(str, hash);
            }
        },
        parse: function parse(input) {
            var self = this,
                stack = [0],
                tstack = [],
                vstack = [null],
                lstack = [],
                table = this.table,
                yytext = '',
                yylineno = 0,
                yyleng = 0,
                recovering = 0,
                TERROR = 2,
                EOF = 1;
            var args = lstack.slice.call(arguments, 1);
            var lexer = Object.create(this.lexer);
            var sharedState = { yy: {} };
            for (var k in this.yy) {
                if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                }
            }
            lexer.setInput(input, sharedState.yy);
            sharedState.yy.lexer = lexer;
            sharedState.yy.parser = this;
            if (typeof lexer.yylloc == 'undefined') {
                lexer.yylloc = {};
            }
            var yyloc = lexer.yylloc;
            lstack.push(yyloc);
            var ranges = lexer.options && lexer.options.ranges;
            if (typeof sharedState.yy.parseError === 'function') {
                this.parseError = sharedState.yy.parseError;
            } else {
                this.parseError = Object.getPrototypeOf(this).parseError;
            }
            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }
            _token_stack: var lex = function lex() {
                var token;
                token = lexer.lex() || EOF;
                if (typeof token !== 'number') {
                    token = self.symbols_[token] || token;
                }
                return token;
            };
            var symbol,
                preErrorSymbol,
                state,
                action,
                a,
                r,
                yyval = {},
                p,
                len,
                newState,
                expected;
            while (true) {
                state = stack[stack.length - 1];
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                        symbol = lex();
                    }
                    action = table[state] && table[state][symbol];
                }
                if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];
                    for (p in table[state]) {
                        if (this.terminals_[p] && p > TERROR) {
                            expected.push('\'' + this.terminals_[p] + '\'');
                        }
                    }
                    if (lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }
                    this.parseError(errStr, {
                        text: lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: lexer.yylineno,
                        loc: yyloc,
                        expected: expected
                    });
                }
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                }
                switch (action[0]) {
                    case 1:
                        stack.push(symbol);
                        vstack.push(lexer.yytext);
                        lstack.push(lexer.yylloc);
                        stack.push(action[1]);
                        symbol = null;
                        if (!preErrorSymbol) {
                            yyleng = lexer.yyleng;
                            yytext = lexer.yytext;
                            yylineno = lexer.yylineno;
                            yyloc = lexer.yylloc;
                            if (recovering > 0) {
                                recovering--;
                            }
                        } else {
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        len = this.productions_[action[1]][1];
                        yyval.$ = vstack[vstack.length - len];
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column
                        };
                        if (ranges) {
                            yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
                        }
                        r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));
                        if (typeof r !== 'undefined') {
                            return r;
                        }
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]);
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        return true;
                }
            }
            return true;
        } };

    // types
    var NOTE = "note";
    var REST = "rest";
    var CHORD = "chord";
    var CHORDSYMBOL = "chordSymbol";

    var toBoolean = function toBoolean(string) {
        if (string === "false") {
            return false;
        } else {
            return Boolean(string);
        }
    };

    function NoteNode(props) {
        this.props = props;
    }

    NoteNode.prototype.type = NOTE;

    NoteNode.prototype.clone = function (newprops) {
        var props = Object.assign({}, this.props, newprops);
        return new NoteNode(props);
    };

    function RestNode(props) {
        this.props = props;
    }

    RestNode.prototype.type = REST;

    RestNode.prototype.clone = function (newprops) {
        var props = Object.assign({}, this.props, newprops);
        return new RestNode(props);
    };

    RestNode.prototype.expand = function () {
        return this;
    };

    function ChordNode(props, children) {
        this.props = props;
        this.children = children;
    }

    ChordNode.prototype.type = CHORD;

    ChordNode.prototype.clone = function (newprops) {
        var props = Object.assign({}, this.props, newprops);
        var children = this.children.map(function (child) {
            return child.clone(newprops);
        });
        return new ChordNode(props, children);
    };

    ChordNode.prototype.expand = function () {
        return this;
    };

    function ChordSymbolNode(props) {
        this.props = props;
    }

    ChordSymbolNode.prototype.type = CHORDSYMBOL;

    ChordSymbolNode.prototype.clone = function () {};

    function ScopeNode(props, list) {
        this.props = props;
        this.list = list;
    }

    ScopeNode.prototype.clone = function () {};

    function clone(el, props) {
        if (el instanceof Array) {
            return el.map(function (item) {
                return clone(item, props);
            });
        } else {
            return el.clone(props);
        }
    }

    var errors = {
        unitializedVar: function unitializedVar(variable, self) {
            return "Uninitialized variable: " + variable + ". Line: " + self._$.first_line + "-" + self._$.last_line + ", Column: " + self._$.first_column + "-" + self._$.last_column + ".";
        }
    };

    /* generated by jison-lex 0.3.4 */
    var lexer = function () {
        var lexer = {

            EOF: 1,

            parseError: function parseError(str, hash) {
                if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                } else {
                    throw new Error(str);
                }
            },

            // resets the lexer, sets new input
            setInput: function setInput(input, yy) {
                this.yy = yy || this.yy || {};
                this._input = input;
                this._more = this._backtrack = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = '';
                this.conditionStack = ['INITIAL'];
                this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                };
                if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                }
                this.offset = 0;
                return this;
            },

            // consumes and returns one char from the input
            input: function input() {
                var ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.offset++;
                this.match += ch;
                this.matched += ch;
                var lines = ch.match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                } else {
                    this.yylloc.last_column++;
                }
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }

                this._input = this._input.slice(1);
                return ch;
            },

            // unshifts one char (or a string) into the input
            unput: function unput(ch) {
                var len = ch.length;
                var lines = ch.split(/(?:\r\n?|\n)/g);

                this._input = ch + this._input;
                this.yytext = this.yytext.substr(0, this.yytext.length - len);
                //this.yyleng -= len;
                this.offset -= len;
                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                this.match = this.match.substr(0, this.match.length - 1);
                this.matched = this.matched.substr(0, this.matched.length - 1);

                if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                }
                var r = this.yylloc.range;

                this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
                };

                if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                }
                this.yyleng = this.yytext.length;
                return this;
            },

            // When called from action, caches matched text and appends it on next action
            more: function more() {
                this._more = true;
                return this;
            },

            // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
            reject: function reject() {
                if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
                return this;
            },

            // retain first n characters of the match
            less: function less(n) {
                this.unput(this.match.slice(n));
            },

            // displays already matched input, i.e. for error messages
            pastInput: function pastInput() {
                var past = this.matched.substr(0, this.matched.length - this.match.length);
                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
            },

            // displays upcoming input, i.e. for error messages
            upcomingInput: function upcomingInput() {
                var next = this.match;
                if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                }
                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
            },

            // displays the character position where the lexing error occurred, i.e. for error messages
            showPosition: function showPosition() {
                var pre = this.pastInput();
                var c = new Array(pre.length + 1).join("-");
                return pre + this.upcomingInput() + "\n" + c + "^";
            },

            // test the lexed token: return FALSE when not a match, otherwise return token
            test_match: function test_match(match, indexed_rule) {
                var token, lines, backup;

                if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                        yylineno: this.yylineno,
                        yylloc: {
                            first_line: this.yylloc.first_line,
                            last_line: this.last_line,
                            first_column: this.yylloc.first_column,
                            last_column: this.yylloc.last_column
                        },
                        yytext: this.yytext,
                        match: this.match,
                        matches: this.matches,
                        matched: this.matched,
                        yyleng: this.yyleng,
                        offset: this.offset,
                        _more: this._more,
                        _input: this._input,
                        yy: this.yy,
                        conditionStack: this.conditionStack.slice(0),
                        done: this.done
                    };
                    if (this.options.ranges) {
                        backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                }

                lines = match[0].match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno += lines.length;
                }
                this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
                };
                this.yytext += match[0];
                this.match += match[0];
                this.matches = match;
                this.yyleng = this.yytext.length;
                if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                }
                this._more = false;
                this._backtrack = false;
                this._input = this._input.slice(match[0].length);
                this.matched += match[0];
                token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
                if (this.done && this._input) {
                    this.done = false;
                }
                if (token) {
                    return token;
                } else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                        this[k] = backup[k];
                    }
                    return false; // rule action called reject() implying the next rule should be tested instead.
                }
                return false;
            },

            // return next match in input
            next: function next() {
                if (this.done) {
                    return this.EOF;
                }
                if (!this._input) {
                    this.done = true;
                }

                var token, match, tempMatch, index;
                if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                }
                var rules = this._currentRules();
                for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);
                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                        match = tempMatch;
                        index = i;
                        if (this.options.backtrack_lexer) {
                            token = this.test_match(tempMatch, rules[i]);
                            if (token !== false) {
                                return token;
                            } else if (this._backtrack) {
                                match = false;
                                continue; // rule action called reject() implying a rule MISmatch.
                            } else {
                                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                                return false;
                            }
                        } else if (!this.options.flex) {
                            break;
                        }
                    }
                }
                if (match) {
                    token = this.test_match(match, rules[index]);
                    if (token !== false) {
                        return token;
                    }
                    // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                    return false;
                }
                if (this._input === "") {
                    return this.EOF;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
            },

            // return next match that has a token
            lex: function lex() {
                var r = this.next();
                if (r) {
                    return r;
                } else {
                    return this.lex();
                }
            },

            // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
            begin: function begin(condition) {
                this.conditionStack.push(condition);
            },

            // pop the previously active lexer condition state off the condition stack
            popState: function popState() {
                var n = this.conditionStack.length - 1;
                if (n > 0) {
                    return this.conditionStack.pop();
                } else {
                    return this.conditionStack[0];
                }
            },

            // produce the lexer rule set which is active for the currently active lexer condition state
            _currentRules: function _currentRules() {
                if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                } else {
                    return this.conditions["INITIAL"].rules;
                }
            },

            // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
            topState: function topState(n) {
                n = this.conditionStack.length - 1 - Math.abs(n || 0);
                if (n >= 0) {
                    return this.conditionStack[n];
                } else {
                    return "INITIAL";
                }
            },

            // alias for begin(condition)
            pushState: function pushState(condition) {
                this.begin(condition);
            },

            // return the number of states currently on the stack
            stateStackSize: function stateStackSize() {
                return this.conditionStack.length;
            },
            options: {},
            performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                var YYSTATE = YY_START;
                switch ($avoiding_name_collisions) {
                    case 0:
                        /* skip whitespace */
                        break;
                    case 1:
                        /* ignore comments */
                        break;
                    case 2:
                        /* ignore barlines */
                        break;
                    case 3:
                        return 21;
                        break;
                    case 4:
                        return 24;
                        break;
                    case 5:
                        return 28;
                        break;
                    case 6:
                        return 30;
                        break;
                    case 7:
                        return 18;
                        break;
                    case 8:
                        return 19;
                        break;
                    case 9:
                        return 10;
                        break;
                    case 10:
                        return 32;
                        break;
                    case 11:
                        return 16;
                        break;
                    case 12:
                        return 8;
                        break;
                    case 13:
                        return 33;
                        break;
                    case 14:
                        return 7;
                        break;
                    case 15:
                        return 22;
                        break;
                    case 16:
                        return 12;
                        break;
                    case 17:
                        return 36;
                        break;
                    case 18:
                        return 23;
                        break;
                    case 19:
                        return 4;
                        break;
                    case 20:
                        return 'INVALID';
                        break;
                }
            },
            rules: [/^(?:\s+)/, /^(?:;.*)/, /^(?:\|)/, /^(?:\()/, /^(?:\))/, /^(?:\[)/, /^(?:\])/, /^(?:<)/, /^(?:>)/, /^(?:\/)/, /^(?:=)/, /^(?:r\b)/, /^(?:\.+)/, /^(?:true|false\b)/, /^(?:[0-9]+)/, /^(?:csym\b)/, /^(?:[a-gA-G][b|#]{0,2}(?![a-zA-Z]))/, /^(?:~[a-zA-Z][a-zA-Z0-9]*)/, /^(?:[a-zA-Z][a-zA-Z0-9]*)/, /^(?:$)/, /^(?:.)/],
            conditions: { "INITIAL": { "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], "inclusive": true } }
        };
        return lexer;
    }();
    parser.lexer = lexer;
    function Parser() {
        this.yy = {};
    }
    Parser.prototype = parser;parser.Parser = Parser;
    return new Parser();
}();

if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parser = lang;
    exports.Parser = lang.Parser;
    exports.parse = function () {
        return lang.parse.apply(lang, arguments);
    };
    exports.main = function commonjsMain(args) {
        if (!args[1]) {
            console.log('Usage: ' + args[0] + ' FILE');
            process.exit(1);
        }
        var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
        return exports.parser.parse(source);
    };
    if (typeof module !== 'undefined' && require.main === module) {
        exports.main(process.argv.slice(1));
    }
}

}).call(this,require('_process'))

},{"_process":6,"fs":3,"path":5}],3:[function(require,module,exports){

},{}],4:[function(require,module,exports){
/**
 * @license Fraction.js v3.3.1 09/09/2015
 * http://www.xarg.org/2014/03/precise-calculations-in-javascript/
 *
 * Copyright (c) 2015, Robert Eisele (robert@xarg.org)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 **/


/**
 *
 * This class offers the possibility to calculate fractions.
 * You can pass a fraction in different formats. Either as array, as double, as string or as an integer.
 *
 * Array/Object form
 * [ 0 => <nominator>, 1 => <denominator> ]
 * [ n => <nominator>, d => <denominator> ]
 *
 * Integer form
 * - Single integer value
 *
 * Double form
 * - Single double value
 *
 * String form
 * 123.456 - a simple double
 * 123/456 - a string fraction
 * 123.'456' - a double with repeating decimal places
 * 123.(456) - synonym
 * 123.45'6' - a double with repeating last place
 * 123.45(6) - synonym
 *
 * Example:
 *
 * var f = new Fraction("9.4'31'");
 * f.mul([-4, 3]).div(4.9);
 *
 */

(function(root) {

  "use strict";

  // Maximum search depth for cyclic rational numbers. 2000 should be more than enough. 
  // Example: 1/7 = 0.(142857) has 6 repeating decimal places.
  // If MAX_CYCLE_LEN gets reduced, long cycles will not be detected and toString() only gets the first 10 digits
  var MAX_CYCLE_LEN = 2000;

  // Parsed data to avoid calling "new" all the time
  var P = {
    "s": 1,
    "n": 0,
    "d": 1
  };

  function assign(n, s) {

    if (isNaN(n = parseInt(n, 10))) {
      throwInvalidParam();
    }
    return n * s;
  }

  function throwInvalidParam() {
    throw "Invalid Param";
  }

  var parse = function(p1, p2) {

    var n = 0, d = 1, s = 1;
    var v = 0, w = 0, x = 0, y = 1, z = 1;

    var A = 0, B = 1;
    var C = 1, D = 1;

    var N = 10000000;
    var M;

    if (p1 === undefined || p1 === null) {
      /* void */
    } else if (p2 !== undefined) {
      n = p1;
      d = p2;
      s = n * d;
    } else
      switch (typeof p1) {

        case "object":
        {
          if ("d" in p1 && "n" in p1) {
            n = p1["n"];
            d = p1["d"];
            if ("s" in p1)
              n*= p1["s"];
          } else if (0 in p1) {
            n = p1[0];
            if (1 in p1)
              d = p1[1];
          } else {
            throwInvalidParam();
          }
          s = n * d;
          break;
        }
        case "number":
        {
          if (p1 < 0) {
            s = p1;
            p1 = -p1;
          }

          if (p1 % 1 === 0) {
            n = p1;
          } else if (p1 > 0) { // check for != 0, scale would become NaN (log(0)), which converges really slow

            if (p1 >= 1) {
              z = Math.pow(10, Math.floor(1 + Math.log(p1) / Math.LN10));
              p1/= z;
            }

            // Using Farey Sequences
            // http://www.johndcook.com/blog/2010/10/20/best-rational-approximation/

            while (B <= N && D <= N) {
              M = (A + C) / (B + D);

              if (p1 === M) {
                if (B + D <= N) {
                  n = A + C;
                  d = B + D;
                } else if (D > B) {
                  n = C;
                  d = D;
                } else {
                  n = A;
                  d = B;
                }
                break;

              } else {

                if (p1 > M) {
                  A+= C;
                  B+= D;
                } else {
                  C+= A;
                  D+= B;
                }

                if (B > N) {
                  n = C;
                  d = D;
                } else {
                  n = A;
                  d = B;
                }
              }
            }
            n*= z;
          } else if (isNaN(p1) || isNaN(p2)) {
            d = n = NaN;
          }
          break;
        }
        case "string":
        {
          B = p1.match(/\d+|./g);

          if (B[A] === '-') {// Check for minus sign at the beginning
            s = -1;
            A++;
          } else if (B[A] === '+') {// Check for plus sign at the beginning
            A++;
          }

          if (B.length === A + 1) { // Check if it's just a simple number "1234"
            w = assign(B[A++], s);
          } else if (B[A + 1] === '.' || B[A] === '.') { // Check if it's a decimal number

            if (B[A] !== '.') { // Handle 0.5 and .5
              v = assign(B[A++], s);
            }
            A++;

            // Check for decimal places
            if (A + 1 === B.length || B[A + 1] === '(' && B[A + 3] === ')' || B[A + 1] === "'" && B[A + 3] === "'") {
              w = assign(B[A], s);
              y = Math.pow(10, B[A].length);
              A++;
            }

            // Check for repeating places
            if (B[A] === '(' && B[A + 2] === ')' || B[A] === "'" && B[A + 2] === "'") {
              x = assign(B[A + 1], s);
              z = Math.pow(10, B[A + 1].length) - 1;
              A+= 3;
            }

          } else if (B[A + 1] === '/' || B[A + 1] === ':') { // Check for a simple fraction "123/456" or "123:456"
            w = assign(B[A], s);
            y = assign(B[A + 2], 1);
            A+= 3;
          } else if (B[A + 3] === '/' && B[A + 1] === ' ') { // Check for a complex fraction "123 1/2"
            v = assign(B[A], s);
            w = assign(B[A + 2], s);
            y = assign(B[A + 4], 1);
            A+= 5;
          }

          if (B.length <= A) { // Check for more tokens on the stack
            d = y * z;
            s = /* void */
                    n = x + d * v + z * w;
            break;
          }

          /* Fall through on error */
        }
        default:
          throwInvalidParam();
      }

    if (d === 0) {
      throw "DIV/0";
    }

    P["s"] = s < 0 ? -1 : 1;
    P["n"] = Math.abs(n);
    P["d"] = Math.abs(d);
  };

  var modpow = function(b, e, m) {

    for (var r = 1; e > 0; b = (b * b) % m, e >>= 1) {

      if (e & 1) {
        r = (r * b) % m;
      }
    }
    return r;
  };

  var cycleLen = function(n, d) {

    for (; d % 2 === 0;
            d/= 2) {}

    for (; d % 5 === 0;
            d/= 5) {}

    if (d === 1) // Catch non-cyclic numbers
      return 0;

    // If we would like to compute really large numbers quicker, we could make use of Fermat's little theorem:
    // 10^(d-1) % d == 1
    // However, we don't need such large numbers and MAX_CYCLE_LEN should be the capstone, 
    // as we want to translate the numbers to strings.

    var rem = 10 % d;

    for (var t = 1; rem !== 1; t++) {
      rem = rem * 10 % d;

      if (t > MAX_CYCLE_LEN)
        return 0; // Returning 0 here means that we don't print it as a cyclic number. It's likely that the answer is `d-1`
    }
    return t;
  };

  var cycleStart = function(n, d, len) {

    var rem1 = 1;
    var rem2 = modpow(10, len, d);

    for (var t = 0; t < 300; t++) { // s < ~log10(Number.MAX_VALUE)
      // Solve 10^s == 10^(s+t) (mod d)

      if (rem1 === rem2)
        return t;

      rem1 = rem1 * 10 % d;
      rem2 = rem2 * 10 % d;
    }
    return 0;
  };

  var gcd = function(a, b) {

    if (!a) return b;
    if (!b) return a;

    while (1) {
      a%= b;
      if (!a) return b;
      b%= a;
      if (!b) return a;
    }
  };

  /**
   * Module constructor
   *
   * @constructor
   * @param {number|Fraction} a
   * @param {number=} b
   */
  function Fraction(a, b) {

    if (!(this instanceof Fraction)) {
      return new Fraction(a, b);
    }

    parse(a, b);

    if (Fraction['REDUCE']) {
      a = gcd(P["d"], P["n"]); // Abuse a
    } else {
      a = 1;
    }

    this["s"] = P["s"];
    this["n"] = P["n"] / a;
    this["d"] = P["d"] / a;
  }

  /**
   * Boolean global variable to be able to disable automatic reduction of the fraction
   *
   */
  Fraction['REDUCE'] = 1;

  Fraction.prototype = {

    "s": 1,
    "n": 0,
    "d": 1,

    /**
     * Calculates the absolute value
     *
     * Ex: new Fraction(-4).abs() => 4
     **/
    "abs": function() {

      return new Fraction(this["n"], this["d"]);
    },

    /**
     * Inverts the sign of the current fraction
     *
     * Ex: new Fraction(-4).neg() => 4
     **/
    "neg": function() {

      return new Fraction(-this["s"] * this["n"], this["d"]);
    },

    /**
     * Adds two rational numbers
     *
     * Ex: new Fraction({n: 2, d: 3}).add("14.9") => 467 / 30
     **/
    "add": function(a, b) {

      parse(a, b);
      return new Fraction(
              this["s"] * this["n"] * P["d"] + P["s"] * this["d"] * P["n"],
              this["d"] * P["d"]
              );
    },

    /**
     * Subtracts two rational numbers
     *
     * Ex: new Fraction({n: 2, d: 3}).add("14.9") => -427 / 30
     **/
    "sub": function(a, b) {

      parse(a, b);
      return new Fraction(
              this["s"] * this["n"] * P["d"] - P["s"] * this["d"] * P["n"],
              this["d"] * P["d"]
              );
    },

    /**
     * Multiplies two rational numbers
     *
     * Ex: new Fraction("-17.(345)").mul(3) => 5776 / 111
     **/
    "mul": function(a, b) {

      parse(a, b);
      return new Fraction(
              this["s"] * P["s"] * this["n"] * P["n"],
              this["d"] * P["d"]
              );
    },

    /**
     * Divides two rational numbers
     *
     * Ex: new Fraction("-17.(345)").inverse().div(3)
     **/
    "div": function(a, b) {

      parse(a, b);
      return new Fraction(
              this["s"] * P["s"] * this["n"] * P["d"],
              this["d"] * P["n"]
              );
    },

    /**
     * Clones the actual object
     *
     * Ex: new Fraction("-17.(345)").clone()
     **/
    "clone": function() {
      return new Fraction(this);
    },

    /**
     * Calculates the modulo of two rational numbers - a more precise fmod
     *
     * Ex: new Fraction('4.(3)').mod([7, 8]) => (13/3) % (7/8) = (5/6)
     **/
    "mod": function(a, b) {

      if (isNaN(this['n']) || isNaN(this['d'])) {
        return new Fraction(NaN);
      }

      if (a === undefined) {
        return new Fraction(this["s"] * this["n"] % this["d"], 1);
      }

      parse(a, b);
      if (0 === P["n"] && 0 === this["d"]) {
        Fraction(0, 0); // Throw div/0
      }

      /*
       * First silly attempt, kinda slow
       *
       return that["sub"]({
       "n": num["n"] * Math.floor((this.n / this.d) / (num.n / num.d)),
       "d": num["d"],
       "s": this["s"]
       });*/

      /*
       * New attempt: a1 / b1 = a2 / b2 * q + r
       * => b2 * a1 = a2 * b1 * q + b1 * b2 * r
       * => (b2 * a1 % a2 * b1) / (b1 * b2)
       */
      return new Fraction(
              (this["s"] * P["d"] * this["n"]) % (P["n"] * this["d"]),
              P["d"] * this["d"]
              );
    },

    /**
     * Calculates the fractional gcd of two rational numbers
     *
     * Ex: new Fraction(5,8).gcd(3,7) => 1/56
     */
    "gcd": function(a, b) {

      parse(a, b);

      // gcd(a / b, c / d) = gcd(a, c) / lcm(b, d)

      return new Fraction(gcd(P["n"], this["n"]), P["d"] * this["d"] / gcd(P["d"], this["d"]));
    },

    /**
     * Calculates the fractional lcm of two rational numbers
     *
     * Ex: new Fraction(5,8).lcm(3,7) => 15
     */
    "lcm": function(a, b) {

      parse(a, b);

      // lcm(a / b, c / d) = lcm(a, c) / gcd(b, d)

      if (P["n"] === 0 && this["n"] === 0) {
        return new Fraction;
      }
      return new Fraction(P["n"] * this["n"] / gcd(P["n"], this["n"]), gcd(P["d"], this["d"]));
    },

    /**
     * Calculates the ceil of a rational number
     *
     * Ex: new Fraction('4.(3)').ceil() => (5 / 1)
     **/
    "ceil": function(places) {

      places = Math.pow(10, places || 0);

      if (isNaN(this["n"]) || isNaN(this["d"])) {
        return new Fraction(NaN);
      }
      return new Fraction(Math.ceil(places * this["s"] * this["n"] / this["d"]), places);
    },

    /**
     * Calculates the floor of a rational number
     *
     * Ex: new Fraction('4.(3)').floor() => (4 / 1)
     **/
    "floor": function(places) {

      places = Math.pow(10, places || 0);

      if (isNaN(this["n"]) || isNaN(this["d"])) {
        return new Fraction(NaN);
      }
      return new Fraction(Math.floor(places * this["s"] * this["n"] / this["d"]), places);
    },

    /**
     * Rounds a rational numbers
     *
     * Ex: new Fraction('4.(3)').round() => (4 / 1)
     **/
    "round": function(places) {

      places = Math.pow(10, places || 0);

      if (isNaN(this["n"]) || isNaN(this["d"])) {
        return new Fraction(NaN);
      }
      return new Fraction(Math.round(places * this["s"] * this["n"] / this["d"]), places);
    },

    /**
     * Gets the inverse of the fraction, means numerator and denumerator are exchanged
     *
     * Ex: new Fraction([-3, 4]).inverse() => -4 / 3
     **/
    "inverse": function() {

      return new Fraction(this["s"] * this["d"], this["n"]);
    },

    /**
     * Calculates the fraction to some integer exponent
     *
     * Ex: new Fraction(-1,2).pow(-3) => -8
     */
    "pow": function(m) {

      if (m < 0) {
        return new Fraction(Math.pow(this['s'] * this["d"],-m), Math.pow(this["n"],-m));
      } else {
        return new Fraction(Math.pow(this['s'] * this["n"], m), Math.pow(this["d"], m));
      }
    },

    /**
     * Check if two rational numbers are the same
     *
     * Ex: new Fraction(19.6).equals([98, 5]);
     **/
    "equals": function(a, b) {

      parse(a, b);
      return this["s"] * this["n"] * P["d"] === P["s"] * P["n"] * this["d"]; // Same as compare() === 0
    },

    /**
     * Check if two rational numbers are the same
     *
     * Ex: new Fraction(19.6).equals([98, 5]);
     **/
    "compare": function(a, b) {

      parse(a, b);
      var t = (this["s"] * this["n"] * P["d"] - P["s"] * P["n"] * this["d"]);
      return (0 < t) - (t < 0);
    },

    /**
     * Check if two rational numbers are divisible
     *
     * Ex: new Fraction(19.6).divisible(1.5);
     */
    "divisible": function(a, b) {

      parse(a, b);
      return !(!(P["n"] * this["d"]) || ((this["n"] * P["d"]) % (P["n"] * this["d"])));
    },

    /**
     * Returns a decimal representation of the fraction
     *
     * Ex: new Fraction("100.'91823'").valueOf() => 100.91823918239183
     **/
    'valueOf': function() {

      return this["s"] * this["n"] / this["d"];
    },

    /**
     * Returns a string-fraction representation of a Fraction object
     *
     * Ex: new Fraction("1.'3'").toFraction() => "4 1/3"
     **/
    'toFraction': function(excludeWhole) {

      var whole, str = "";
      var n = this["n"];
      var d = this["d"];
      if (this["s"] < 0) {
        str+= '-';
      }

      if (d === 1) {
        str+= n;
      } else {

        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
          str+= whole;
          str+= " ";
          n%= d;
        }

        str+= n;
        str+= '/';
        str+= d;
      }
      return str;
    },

    /**
     * Returns a latex representation of a Fraction object
     *
     * Ex: new Fraction("1.'3'").toLatex() => "\frac{4}{3}"
     **/
    'toLatex': function(excludeWhole) {

      var whole, str = "";
      var n = this["n"];
      var d = this["d"];
      if (this["s"] < 0) {
        str+= '-';
      }

      if (d === 1) {
        str+= n;
      } else {

        if (excludeWhole && (whole = Math.floor(n / d)) > 0) {
          str+= whole;
          n%= d;
        }

        str+= "\\frac{";
        str+= n;
        str+= '}{';
        str+= d;
        str+= '}';
      }
      return str;
    },

    /**
     * Returns an array of continued fraction elements
     * 
     * Ex: new Fraction("7/8").toContinued() => [0,1,7]
     */
    'toContinued': function() {

      var t;
      var a = this['n'];
      var b = this['d'];
      var res = [];

      do {
        res.push(Math.floor(a / b));
        t = a % b;
        a = b;
        b = t;
      } while (a !== 1);

      return res;
    },

    /**
     * Creates a string representation of a fraction with all digits
     *
     * Ex: new Fraction("100.'91823'").toString() => "100.(91823)"
     **/
    'toString': function() {

      var g;
      var N = this["n"];
      var D = this["d"];

      if (isNaN(N) || isNaN(D)) {
        return "NaN";
      }

      if (!Fraction['REDUCE']) {
        g = gcd(N, D);
        N/= g;
        D/= g;
      }

      var p = String(N).split(""); // Numerator chars
      var t = 0; // Tmp var

      var ret = [~this["s"] ? "" : "-", "", ""]; // Return array, [0] is zero sign, [1] before comma, [2] after
      var zeros = ""; // Collection variable for zeros

      var cycLen = cycleLen(N, D); // Cycle length
      var cycOff = cycleStart(N, D, cycLen); // Cycle start

      var j = -1;
      var n = 1; // str index

      // rough estimate to fill zeros
      var length = 15 + cycLen + cycOff + p.length; // 15 = decimal places when no repitation

      for (var i = 0; i < length; i++, t*= 10) {

        if (i < p.length) {
          t+= Number(p[i]);
        } else {
          n = 2;
          j++; // Start now => after comma
        }

        if (cycLen > 0) { // If we have a repeating part
          if (j === cycOff) {
            ret[n]+= zeros + "(";
            zeros = "";
          } else if (j === cycLen + cycOff) {
            ret[n]+= zeros + ")";
            break;
          }
        }

        if (t >= D) {
          ret[n]+= zeros + ((t / D) | 0); // Flush zeros, Add current digit
          zeros = "";
          t = t % D;
        } else if (n > 1) { // Add zeros to the zero buffer
          zeros+= "0";
        } else if (ret[n]) { // If before comma, add zero only if already something was added
          ret[n]+= "0";
        }
      }

      // If it's empty, it's a leading zero only
      ret[0]+= ret[1] || "0";

      // If there is something after the comma, add the comma sign
      if (ret[2]) {
        return ret[0] + "." + ret[2];
      }
      return ret[0];
    }
  };

  if (typeof define === "function" && define["amd"]) {
    define([], function() {
      return Fraction;
    });
  } else if (typeof exports === "object") {
    module["exports"] = Fraction;
  } else {
    root['Fraction'] = Fraction;
  }

})(this);

},{}],5:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require('_process'))

},{"_process":6}],6:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],7:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _lang = require("../lang/lang");

var _time = require("./time.js");

function compile(program) {
    _lang.parser.yy.voices = {};
    _lang.parser.yy.chordSymbols = [];
    _lang.parser.yy.vars = {};

    var parsed = _lang.parser.parse(program);

    for (var voice in _lang.parser.yy.voices) {
        if (_lang.parser.yy.voices.hasOwnProperty(voice)) {
            (0, _time.calculateAndSetTimes)(_lang.parser.yy.voices[voice]);
        }
    }

    return { voices: _lang.parser.yy.voices, chordSymbols: _lang.parser.yy.chordSymbols };
}

exports.default = compile;

},{"../lang/lang":2,"./time.js":8}],8:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.calculateAndSetTimes = calculateAndSetTimes;

var _fraction = require("fraction.js");

var _fraction2 = _interopRequireDefault(_fraction);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isNote(item) {
	return item.type === "note";
}

function isChord(item) {
	return item.type === "chord";
}

function isRest(item) {
	return item.type === "rest";
}

function isTimeSignature(item) {
	return item.type === "timeSig";
}

function isRepeat(item) {
	return item.type === "repeat";
}

/*
 * @param item - Scored item. Given an item, return the rational duration of the item;
 * @return Number
 */
function calculateDuration(item) {

	// The item doesn't have a duration unless it's one of the following types.
	if (!(isNote(item) || isChord(item) || isRest(item) || isRepeat(item))) return 0;

	var s = item.props.tuplet ? item.props.tuplet.split("/") : null;
	var tuplet = s ? new _fraction2.default(s[0], s[1]) : null;
	var dots = item.props.dots || 0;

	var dur = new _fraction2.default(1, item.props.value || 4);

	for (var i = 0; i < dots; i++) {
		dur = dur.mul(1.5);
	}

	if (tuplet && dur) {
		dur = dur.mul(s[1]).div(s[0]);
	}

	if (item.tempo) {
		// 60 bpm is the default tempo where beat is a quarter note
		dur = dur.mul(60 * 4 / item.tempo);
	}

	return dur;
}

/*
 * @param items - Item[]
 * @param offset - Optional amount of time that will be added to the items times.
 */
function calculateAndSetTimes(items) {
	var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

	return items.reduce(function (acc, item) {
		var previousItem = acc[acc.length - 1];

		if (previousItem) {
			item.props.time = (0, _fraction2.default)(previousItem.props.time).add(calculateDuration(previousItem)).add(offset).valueOf();
		} else {
			item.props.time = 0;
		}

		return acc.concat([item]);
	}, []);
}

},{"fraction.js":4}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
